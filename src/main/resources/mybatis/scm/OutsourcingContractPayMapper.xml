<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ev.scm.dao.OutsourcingContractPayDao">

	<select id="get" resultType="com.ev.scm.domain.OutsourcingContractPayDO">
		SELECT 
		<include refid="sql_column_list"/>  
		FROM scm_outsourcing_contract_pay 
		WHERE id = #{value}
	</select>

	<select id="list" resultType="com.ev.scm.domain.OutsourcingContractPayDO">
		SELECT 
		<include refid="sql_column_list"/>
		FROM scm_outsourcing_contract_pay
		<include refid="sql_condition"/>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                ORDER BY ${sort} ${order}
            </when>
			<otherwise>
                ORDER BY id DESC
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
        SELECT COUNT(*) FROM scm_outsourcing_contract_pay
		<include refid="sql_condition"/>
	</select>

    <sql id="sql_column_list">
		`id`,`contract_id`,`payable_date`,`payable_amount`,`paid_amount`,`unpaid_amount`,`remarks`,`create_by`,`create_time`,`update_by`,`update_time`,`del_flag`
	</sql>

    <sql id="sql_condition">
        <where>
                            <if test="id != null and id != ''"> AND id = #{id} </if>
                            <if test="contractId != null and contractId != ''"> AND contract_id = #{contractId} </if>
                            <if test="payableDate != null and payableDate != ''"> AND payable_date = #{payableDate} </if>
                            <if test="payableAmount != null and payableAmount != ''"> AND payable_amount = #{payableAmount} </if>
                            <if test="paidAmount != null and paidAmount != ''"> AND paid_amount = #{paidAmount} </if>
                            <if test="unpaidAmount != null and unpaidAmount != ''"> AND unpaid_amount = #{unpaidAmount} </if>
                            <if test="remarks != null and remarks != ''"> AND remarks = #{remarks} </if>
                            <if test="createBy != null and createBy != ''"> AND create_by = #{createBy} </if>
                            <if test="createTime != null and createTime != ''"> AND create_time = #{createTime} </if>
                            <if test="updateBy != null and updateBy != ''"> AND update_by = #{updateBy} </if>
                            <if test="updateTime != null and updateTime != ''"> AND update_time = #{updateTime} </if>
                            <if test="delFlag != null and delFlag != ''"> AND del_flag = #{delFlag} </if>
                    </where>
    </sql>
	 
	<insert id="save" parameterType="com.ev.scm.domain.OutsourcingContractPayDO" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO scm_outsourcing_contract_pay
		(
			`contract_id`, 
			`payable_date`, 
			`payable_amount`, 
			`paid_amount`, 
			`unpaid_amount`, 
			`remarks`, 
			`create_by`, 
			`create_time`, 
			`update_by`, 
			`update_time`, 
			`del_flag`
		)
		VALUES
		(
			#{contractId}, 
			#{payableDate}, 
			#{payableAmount}, 
			#{paidAmount}, 
			#{unpaidAmount}, 
			#{remarks}, 
			#{createBy}, 
			#{createTime}, 
			#{updateBy}, 
			#{updateTime}, 
			#{delFlag}
		)
	</insert>
	 
	<update id="update" parameterType="com.ev.scm.domain.OutsourcingContractPayDO">
		UPDATE scm_outsourcing_contract_pay
		<set>
			<if test="contractId != null">`contract_id` = #{contractId}, </if>
			<if test="payableDate != null">`payable_date` = #{payableDate}, </if>
			<if test="payableAmount != null">`payable_amount` = #{payableAmount}, </if>
			<if test="paidAmount != null">`paid_amount` = #{paidAmount}, </if>
			<if test="unpaidAmount != null">`unpaid_amount` = #{unpaidAmount}, </if>
			<if test="remarks != null">`remarks` = #{remarks}, </if>
			<if test="createBy != null">`create_by` = #{createBy}, </if>
			<if test="createTime != null">`create_time` = #{createTime}, </if>
			<if test="updateBy != null">`update_by` = #{updateBy}, </if>
			<if test="updateTime != null">`update_time` = #{updateTime}, </if>
			<if test="delFlag != null">`del_flag` = #{delFlag}</if>
		</set>
		WHERE id = #{id}
	</update>
	
	<delete id="remove">
		DELETE FROM scm_outsourcing_contract_pay WHERE id = #{value}
	</delete>
	
	<delete id="batchRemove">
        DELETE FROM scm_outsourcing_contract_pay WHERE id IN
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
    <!--自定义-->
    <delete id="batchRemoveByOutsourcingContractIds">
        DELETE FROM scm_outsourcing_contract_pay WHERE contract_id IN
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

	<select id="countByContract" resultType="map">
		SELECT
		COUNT(*) AS totalCount,
		SUM(payable_amount) AS totalPayableAmount,
		SUM(paid_amount) AS totalPaidAmount,
		SUM(unpaid_amount)  AS totalUnpaidAmount
		FROM scm_outsourcing_contract_pay
		<include refid="sql_condition"/>
	</select>

	<select id="payListForMap" resultType="java.util.Map">
		SELECT
		pay.id AS itemId,
		pay.contract_id AS id,
		contract.`contract_code`  AS contractCode,
		contract.supplier_id AS supplierId,
		supplier.`name` AS supplierName,
		pay.paid_amount AS paidAmount,
		pay.payable_amount AS payableAmount,
		pay.unpaid_amount AS unpaidAmount,
		pay.payable_date AS payableDate,
		pay.`remarks` AS remarks,
		contract.`create_time` AS createTime
		FROM scm_outsourcing_contract_pay pay
		LEFT JOIN scm_outsourcing_contract contract ON contract.id = pay.contract_id
		LEFT JOIN cus_supplier supplier ON supplier.id = contract.supplier_id
		<where>
			<if test="clientName != null and clientName != ''"> and supplier.`name` LIKE #{clientName} </if>
			<if test="isDialog==1"> and pay.unpaid_amount &gt; 0 </if>
			<if test="closeStatus != null"> and contract.close_status = #{closeStatus} </if>
			<if test="auditSign != null and auditSign != ''"> and contract.audit_sign = #{auditSign} </if>
			<if test="startTime != null and startTime != ''"> and  DATE_FORMAT(contract.create_time,'%Y-%m-%d') &gt;=  DATE_FORMAT(#{startTime},'%Y-%m-%d')</if>
			<if test="endTime != null and endTime != ''">  and  DATE_FORMAT(contract.create_time,'%Y-%m-%d') &lt;=   DATE_FORMAT(#{endTime},'%Y-%m-%d')</if>
		</where>
		<choose>
			<when test="sort != null and sort.trim() != ''">
				order by ${sort} ${order}
			</when>
			<otherwise>
				order by pay.id desc
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="payCountForMap" resultType="java.util.Map">
		SELECT
		COUNT(*) AS totalCount,
		SUM(pay.paid_amount) AS totalPaidAmount,
		SUM(pay.payable_amount) AS totalPayableAmount,
		SUM(pay.unpaid_amount)  AS totalUnpaidAmount
		FROM scm_outsourcing_contract_pay pay
		LEFT JOIN scm_outsourcing_contract contract ON contract.id = pay.contract_id
		LEFT JOIN cus_supplier supplier ON supplier.id = contract.supplier_id
		<where>
			<if test="clientName != null and clientName != ''"> and supplier.`name` LIKE #{clientName} </if>
			<if test="isDialog==1"> and pay.unpaid_amount &gt; 0 </if>
			<if test="closeStatus != null"> and contract.close_status = #{closeStatus} </if>
			<if test="auditSign != null and auditSign != ''"> and contract.audit_sign = #{auditSign} </if>
			<if test="startTime != null and startTime != ''"> and  DATE_FORMAT(contract.create_time,'%Y-%m-%d') &gt;=  DATE_FORMAT(#{startTime},'%Y-%m-%d')</if>
			<if test="endTime != null and endTime != ''">  and  DATE_FORMAT(contract.create_time,'%Y-%m-%d') &lt;=   DATE_FORMAT(#{endTime},'%Y-%m-%d')</if>
		</where>
	</select>




	<select id="getOutContractPayAmount" resultType="com.ev.scm.domain.OutsourcingContractPayDO">
		SELECT
		id,
		unpaid_amount
		FROM scm_outsourcing_contract_pay
		WHERE id IN
		<foreach item="id" collection="payItemId" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>




</mapper>