<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ev.scm.dao.StockInItemDao">

	<select id="get" resultType="com.ev.scm.domain.StockInItemDO">
		SELECT
		<include refid="sql_column_list"/>
		FROM scm_stock_in_item
		WHERE id = #{value}
	</select>

	<select id="list" resultType="com.ev.scm.domain.StockInItemDO">
		SELECT
		<include refid="sql_column_list"/>
		FROM scm_stock_in_item
		<include refid="sql_condition"/>
		<choose>
			<when test="sort != null and sort.trim() != ''">
				order by ${sort} ${order}
			</when>
			<otherwise>
				order by id desc
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="count" resultType="int">
		select count(*) from scm_stock_in_item
		<include refid="sql_condition"/>
	</select>

	<sql id="sql_column_list">
		`id`,
		`inhead_id`,
		`materiel_id`,
		`batch`,
		`count`,
		`unit_price`,
		`amount`,
		`warehouse`,
		`wareh_location`,
		`return_reason`,
		`source_type`,
		`source_code`,
		`source_id`,
		`expense`,
		`cost`,
		`create_by`,
		`create_time`,
		`update_by`,
		`update_time`,
		`del_flag`,
		`materialId_count`,
		`qrcode_id`,
		`account_source`
	</sql>

	<sql id="sql_condition">
		<where>
			<if test="id != null and id != ''"> and id = #{id} </if>
			<if test="inheadId != null and inheadId != ''"> and inhead_id = #{inheadId} </if>
			<if test="materielId != null and materielId != ''"> and materiel_id = #{materielId} </if>
			<if test="batch != null and batch != ''"> and batch = #{batch} </if>
			<if test="count != null and count != ''"> and count = #{count} </if>
			<if test="unitPrice != null and unitPrice != ''"> and unit_price = #{unitPrice} </if>
			<if test="amount != null and amount != ''"> and amount = #{amount} </if>
			<if test="warehouse != null and warehouse != ''"> and warehouse = #{warehouse} </if>
			<if test="warehLocation != null and warehLocation != ''"> and wareh_location = #{warehLocation} </if>
			<if test="returnReason != null and returnReason != ''"> and return_reason = #{returnReason} </if>
			<if test="sourceType != null and sourceType != ''"> and source_type = #{sourceType} </if>
			<if test="sourceCode != null and sourceCode != ''"> and source_code = #{sourceCode} </if>
			<if test="sourceId != null and sourceId != ''"> and source_id = #{sourceId} </if>
			<if test="expense != null and expense != ''"> and expense = #{expense} </if>
			<if test="cost != null and cost != ''"> and cost = #{cost} </if>
			<if test="createBy != null and createBy != ''"> and create_by = #{createBy} </if>
			<if test="createTime != null and createTime != ''"> and create_time = #{createTime} </if>
			<if test="updateBy != null and updateBy != ''"> and update_by = #{updateBy} </if>
			<if test="updateTime != null and updateTime != ''"> and update_time = #{updateTime} </if>
			<if test="delFlag != null and delFlag != ''"> and del_flag = #{delFlag} </if>
			<if test="materialIdCount != null and materialIdCount != ''"> and materialId_count = #{materialIdCount} </if>
			<if test="qrcodeId != null and qrcodeId != ''"> and qrcode_id = #{qrcodeId} </if>
			<if test="accountSource != null and accountSource != ''"> and account_source = #{accountSource} </if>
		</where>
	</sql>

	<insert id="save" parameterType="com.ev.scm.domain.StockInItemDO" useGeneratedKeys="true" keyProperty="id">
		insert into scm_stock_in_item
		(
		`inhead_id`,
		`materiel_id`,
		`batch`,
		`count`,
		`unit_price`,
		`amount`,
		`warehouse`,
		`wareh_location`,
		`return_reason`,
		`source_type`,
		`source_code`,
		`source_id`,
		`expense`,
		`cost`,
		`create_by`,
		`create_time`,
		`update_by`,
		`update_time`,
		`del_flag`,
		`materialId_count`,
		`qrcode_id`,
		`account_source`
		)
		values
		(
		#{inheadId},
		#{materielId},
		#{batch},
		#{count},
		#{unitPrice},
		#{amount},
		#{warehouse},
		#{warehLocation},
		#{returnReason},
		#{sourceType},
		#{sourceCode},
		#{sourceId},
		#{expense},
		#{cost},
		#{createBy},
		#{createTime},
		#{updateBy},
		#{updateTime},
		#{delFlag},
		#{materialIdCount},
		#{qrcodeId},
		#{accountSource}
		)
	</insert>

	<update id="update" parameterType="com.ev.scm.domain.StockInItemDO">
		update scm_stock_in_item
		<set>
			<if test="inheadId != null">`inhead_id` = #{inheadId}, </if>
			<if test="materielId != null">`materiel_id` = #{materielId}, </if>
			<if test="batch != null">`batch` = #{batch}, </if>
			<if test="count != null">`count` = #{count}, </if>
			<if test="unitPrice != null">`unit_price` = #{unitPrice}, </if>
			<if test="amount != null">`amount` = #{amount}, </if>
			<if test="warehouse != null">`warehouse` = #{warehouse}, </if>
			<if test="warehLocation != null">`wareh_location` = #{warehLocation}, </if>
			<if test="returnReason != null">`return_reason` = #{returnReason}, </if>
			<if test="sourceType != null">`source_type` = #{sourceType}, </if>
			<if test="sourceCode != null">`source_code` = #{sourceCode}, </if>
			<if test="sourceId != null">`source_id` = #{sourceId}, </if>
			<if test="expense != null">`expense` = #{expense}, </if>
			<if test="cost != null">`cost` = #{cost}, </if>
			<if test="createBy != null">`create_by` = #{createBy}, </if>
			<if test="createTime != null">`create_time` = #{createTime}, </if>
			<if test="updateBy != null">`update_by` = #{updateBy}, </if>
			<if test="updateTime != null">`update_time` = #{updateTime}, </if>
			<if test="delFlag != null">`del_flag` = #{delFlag},</if>
			<if test="materialIdCount != null">`materialId_count` = #{materialIdCount},</if>
			<if test="qrcodeId != null">`qrcode_id` = #{qrcodeId},</if>
			<if test="accountSource != null">`account_source` = #{accountSource}</if>
		</set>
		where id = #{id}
	</update>

	<delete id="remove">
		delete from scm_stock_in_item where id = #{value}
	</delete>

	<delete id="batchRemove">
		delete from scm_stock_in_item where id in
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>



	<delete id="removeByInHeadId">
		delete
		from
		scm_stock_in_item
		where
		inhead_id IN
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

	<select id="deatilOfBody" resultType="map">
		select
		aa.id,
		aa.materiel_id	as materielId,
		m.serial_no as serialno,
		m.name as proName,
		m.specification ,
		m.unit_uom as unit,
		n.name as unitName,
		m.is_lot as isLot,
		aa.batch ,
		aa.count ,
		aa.unit_price as unitPrice,
		aa.amount,
		aa.warehouse,
		o.name as warehouseName,
		aa.wareh_location	as warehLocation,
		p.name as  warehLocationName,
		aa.return_reason as returnReason,
		aa.source_type	 as sourceType,
		q.name as sourceTypeName,
		aa.source_code	 as  sourceCode,
		aa.source_id     as  sourceId,
		aa.cost,
		aa.expense
		from
		scm_stock_in_item  aa
		LEFT JOIN  cus_materiel m  ON aa.materiel_id=m.id
		LEFT JOIN  cus_dictionary n  ON m.unit_uom=n.id
		LEFT JOIN  cus_facility o  ON aa.warehouse=o.id
		LEFT JOIN  cus_facility_location p  ON aa.wareh_location=p.id
		LEFT JOIN  cus_dictionary q ON aa.source_type=q.id
		where aa.inhead_id=#{id}
	</select>


	<select id="getProByHeadId" resultType="map">
			select
			cph.id as headId,
		cph.in_time     AS  enteringTime,
		cpb.materiel_id      AS materielId,
		cpb.batch,
		cpb.count   AS count,
		cpb.unit_price	AS unitPrice,
		cpb.amount  AS amount,
		cph.source_company AS sourceCompany,
		cpb.warehouse      AS warehouse,
		cpb.wareh_location AS warehLocation,
		cpb.inhead_id  AS inheadId,
		cpb.cost,
		cpb.source_type AS sourceType,
		cph.storage_type AS storageType,
		cpb.expense,
		cpb.id AS inbodyId
		from  scm_stock_in_item  cpb
		LEFT JOIN scm_stock_in  cph ON cpb.inhead_id=cph.id
		where   cpb.inhead_id=#{value}
	</select>



	<!--=======================================================================================================-->



	<select id="getBodyDetalByHeadId" resultType="map">
	select
			a.pro_id AS  proId,
			b.name   AS proName,
			b.specification  AS proModel,
			b.unit_uom as unit,
			c.name   AS unitName,
			a.pro_count  AS count,
			a.pro_price	 AS price,
			a.pro_amount  AS amount,
			a.pro_batch   AS batch,
			a.warehouse   AS warehouse,
			d.name        AS warehouseName,
			a.wareh_location AS warehLocation,
			e.name        AS  warehLocationName,
			a.source_singletype as sourceSingletype,
			f.name        AS   sourceSingletypeName,
			a.expense,
			a.cost,
			a.source_singlecode AS sourceSinglecode
		from  scm_stock_in_item  a
		LEFT JOIN cus_materiel    b ON a.pro_id=b.id
		LEFT JOIN cus_dictionary c ON b.unit_uom=c.id
		LEFT JOIN cus_facility   d ON a.warehouse =d.id
		LEFT JOIN cus_facility_location   e ON a.wareh_location =e.id
		LEFT JOIN cus_dictionary f ON a.source_singletype=f.id
		WHERE  a.inhead_id = #{id}

	</select>


	<select id="getlistForMap" resultType="map">
		select
		b.id as headId,
		a.id as bodyId,
		b.in_time as inTime,
		b.inhead_code as inheadCode,
		b.source_company as sourceCompanyId,
		c.name as  sourceCompanyName,
		d.serial_no as serialno,
		d.name as proName,
		d.specification as model,
		d.unit_uom as unit,
		d.tax_percent as taxRate,
		e.name as unitName,
		a.pro_count as proCount,
		a.pro_price as proPrice,
		a.pro_amount as proAmount,
		a.warehouse,
		f.name as warehouseName,
		a.expense,
		a.cost,
		a.wareh_location as warehLocation,
		g.name as  warehLocationName,
		a.source_singletype as sourceSingletype,
		h.name as sourceSingletypeName,
		a.source_singlecode as sourceSinglecode,
		b.audit_sign as auditSign,
		i.name as auditSignName
		from scm_stock_in_item  a
		LEFT JOIN  scm_stock_in  b  ON a.inhead_id=b.id
		LEFT JOIN  cus_supplier  c  ON b.source_company=c.id
		LEFT JOIN  cus_materiel d  ON a.pro_id=d.id
		LEFT JOIN  cus_dictionary e  ON d.unit_uom=e.id
		LEFT JOIN  cus_facility f  ON a.warehouse=f.id
		LEFT JOIN  cus_facility_location g  ON a.wareh_location=g.id
		LEFT JOIN  cus_dictionary h  ON a.source_singletype=h.id
		LEFT JOIN  cus_dictionary i  ON b.audit_sign=i.id
		<where>

			<if test="inDatas != null and inDatas != ''"> and ((c.name like  CONCAT('%',#{inDatas},'%'))or(d.name like CONCAT('%',#{inDatas},'%'))or(d.serialno like CONCAT('%',#{inDatas},'%'))or(b.inhead_code like CONCAT('%',#{inDatas},'%')))</if>

			<if test="productName != null and productName != ''"> and  d.name like CONCAT('%',#{productName},'%')</if>

			<if test="startTime != null and startTime != ''"> and b.in_time &gt;= #{startTime}</if>
			<if test="endTime != null and endTime != ''"> and b.in_time &lt;= #{endTime}</if>

			<if test="sourceCompanyId != null and sourceCompanyId != ''"> and b.source_company = #{sourceCompanyId}</if>

			<if test="proType != null and proType != ''"> and d.type = #{proType}</if>
			<if test="proBatch != null and  proBatch != '' "> and a.pro_batch = #{proBatch}</if>

			<if test="auditSign != null and  auditSign != ''"> and b.audit_sign = #{auditSign}</if>

			<if test="operator != null and operator != ''"> and b.operator = #{operator}</if>

			<if test="createBy != null and  createBy != ''"> and b.create_by = #{createBy}</if>
			<if test="createTime != null and  createTime != ''"> and b.create_time = #{createTime}</if>
			<if test="storageType != null and storageType != ''"> and b.storage_type = #{storageType}</if>

		</where>
		<choose>
			<when test="sort != null and sort.trim() != ''">
				order by ${sort} ${order}
			</when>
			<otherwise>
				order by a.id desc
			</otherwise>
		</choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>


	<select id="countOfList" resultType="int">
		select count(*)
		from scm_stock_in_item  a
		LEFT JOIN  scm_stock_in  b  ON a.inhead_id=b.id
		LEFT JOIN  cus_supplier  c  ON b.source_company=c.id
		LEFT JOIN  cus_materiel d  ON a.pro_id=d.id
		LEFT JOIN  cus_dictionary e  ON d.unit_uom=e.id
		LEFT JOIN  cus_facility f  ON a.warehouse=f.id
		LEFT JOIN  cus_facility_location g  ON a.wareh_location=g.id
		LEFT JOIN  cus_dictionary h  ON a.source_singletype=h.id
		LEFT JOIN  cus_dictionary i  ON b.audit_sign=i.id
		<where>
			<if test="inDatas != null and inDatas != ''"> and ((c.name like  CONCAT('%',#{inDatas},'%'))or(d.name like CONCAT('%',#{inDatas},'%'))or(d.serialno like CONCAT('%',#{inDatas},'%'))or(b.inhead_code like CONCAT('%',#{inDatas},'%')))</if>

			<if test="productName != null and productName != ''"> and  d.name like CONCAT('%',#{productName},'%')</if>

			<if test="startTime != null and startTime != ''"> and b.in_time &gt;= #{inTime}</if>
			<if test="endTime != null and endTime != ''"> and b.in_time &lt;= #{inTime}</if>

			<if test="sourceCompanyId != null and sourceCompanyId != ''"> and b.source_company = #{sourceCompanyId}</if>

			<if test="proType != null and proType != ''"> and d.type = #{proType}</if>
			<if test="proBatch != null and  proBatch != '' "> and a.pro_batch = #{proBatch}</if>

			<if test="auditSign != null and  auditSign != ''"> and b.audit_sign = #{auditSign}</if>

			<if test="operator != null and operator != ''"> and b.operator = #{operator}</if>

			<if test="createBy != null and  createBy != ''"> and b.create_by = #{createBy}</if>
			<if test="createTime != null and  createTime != ''"> and b.create_time = #{createTime}</if>
			<if test="storageType != null and storageType != ''"> and b.storage_type = #{storageType}</if>
		</where>
	</select>


	<update id="updateExpense" parameterType="map">
		UPDATE
			scm_stock_in_item a
		set
		    a.expense=#{expense}
		where
			a.id = #{id}
	</update>

	<select id="getListBystockInId" resultType="map">
		SELECT
		a.inhead_id as stockInId,
		a.id,
		a.count as `count`
		IF(a.amount is null,0,a.amount) AS amount
		FROM
		scm_stock_in_item a
		LEFT JOIN scm_stock_in b on a.inhead_id=b.id
		where
		b.id in
		<foreach item="id" collection="purchaseId" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>


	<select id="getTotailCountAmount" resultType="map">
		SELECT
		IF(SUM(amount)is null,0,SUM(amount)) AS totailAmount,
		IF(SUM(`count`)is null,0,SUM(`count`)) AS totailCount
		FROM
		(
			SELECT
			a.inhead_id as stockInId,
			a.id,
			a.count as `count`,
			a.amount
			FROM
			scm_stock_in_item a
			LEFT JOIN scm_stock_in b on a.inhead_id=b.id
			where
			b.id=#{value}
		)aa
	</select>


	<update id="batchUpdate" parameterType="List">
		UPDATE scm_stock_in_item
		<trim prefix="set" suffixOverrides=",">
			<trim prefix="inhead_id=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.inheadId!=null">
						when id=#{item.id} then #{item.inheadId}
					</if>
					<if test="item.inheadId==null">
						when id=#{item.id} then scm_stock.inhead_id
					</if>
				</foreach>
			</trim>
			<trim prefix="materiel_id=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.materielId!=null">
						when id=#{item.id} then #{item.materielId}
					</if>
					<if test="item.materielId==null">
						when id=#{item.id} then scm_stock.materiel_id
					</if>
				</foreach>
			</trim>

			<trim prefix="batch=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.batch!=null">
						when id=#{item.id} then #{item.batch}
					</if>
					<if test="item.batch==null">
						when id=#{item.id} then scm_stock.batch
					</if>
				</foreach>
			</trim>
			<trim prefix="count=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.count!=null">
						when id=#{item.id} then #{item.count}
					</if>
					<if test="item.count==null">
						when id=#{item.id} then scm_stock.count
					</if>
				</foreach>
			</trim>
			<trim prefix="unit_price=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.unitPrice!=null">
						when id=#{item.id} then #{item.unitPrice}
					</if>
					<if test="item.unitPrice==null">
						when id=#{item.id} then scm_stock.unit_price
					</if>
				</foreach>
			</trim>
			<trim prefix="amount=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.amount!=null">
						when id=#{item.id} then #{item.amount}
					</if>
					<if test="item.amount==null">
						when id=#{item.id} then scm_stock.amount
					</if>
				</foreach>
			</trim>
			<trim prefix="warehouse=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.warehouse!=null">
						when id=#{item.id} then #{item.warehouse}
					</if>
					<if test="item.warehouse==null">
						when id=#{item.id} then scm_stock.warehouse
					</if>
				</foreach>
			</trim>
			<trim prefix="wareh_location=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.warehLocation!=null">
						when id=#{item.id} then #{item.warehLocation}
					</if>
					<if test="item.warehLocation==null">
						when id=#{item.id} then scm_stock.wareh_location
					</if>
				</foreach>
			</trim>
			<trim prefix="return_reason=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.returnReason!=null">
						when id=#{item.id} then #{item.returnReason}
					</if>
					<if test="item.returnReason==null">
						when id=#{item.id} then scm_stock.return_reason
					</if>
				</foreach>
			</trim>
			<trim prefix="source_type=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.sourceType!=null">
						when id=#{item.id} then #{item.sourceType}
					</if>
					<if test="item.sourceType==null">
						when id=#{item.id} then scm_stock.source_type
					</if>
				</foreach>
			</trim>
			<trim prefix="source_code=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.sourceCode!=null">
						when id=#{item.id} then #{item.sourceCode}
					</if>
					<if test="item.sourceCode==null">
						when id=#{item.id} then scm_stock.source_code
					</if>
				</foreach>
			</trim>
			<trim prefix="source_id=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.sourceId!=null">
						when id=#{item.id} then #{item.sourceId}
					</if>
					<if test="item.sourceId==null">
						when id=#{item.id} then scm_stock.source_id
					</if>
				</foreach>
			</trim>
			<trim prefix="expense=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.expense!=null">
						when id=#{item.id} then #{item.expense}
					</if>
					<if test="item.expense==null">
						when id=#{item.id} then scm_stock.expense
					</if>
				</foreach>
			</trim>
			<trim prefix="cost=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.cost!=null">
						when id=#{item.id} then #{item.cost}
					</if>
					<if test="item.cost==null">
						when id=#{item.id} then scm_stock.cost
					</if>
				</foreach>
			</trim>
			<trim prefix="create_by =case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.createBy!=null">
						when id=#{item.id} then #{item.createBy}
					</if>
					<if test="item.createBy==null">
						when id=#{item.id} then scm_stock.create_by
					</if>
				</foreach>
			</trim>
			<trim prefix="create_time =case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.createTime!=null">
						when id=#{item.id} then #{item.createTime}
					</if>
					<if test="item.createTime==null">
						when id=#{item.id} then scm_stock.create_time
					</if>
				</foreach>
			</trim>
			<trim prefix="update_by =case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.updateBy!=null">
						when id=#{item.id} then #{item.updateBy}
					</if>
					<if test="item.updateBy==null">
						when id=#{item.id} then scm_stock.update_by
					</if>
				</foreach>
			</trim>
			<trim prefix="update_time =case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.updateTime!=null">
						when id=#{item.id} then #{item.updateTime}
					</if>
					<if test="item.updateTime==null">
						when id=#{item.id} then scm_stock.update_time
					</if>
				</foreach>
			</trim>
			<trim prefix="del_flag =case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.delFlag!=null">
						when id=#{item.id} then #{item.delFlag}
					</if>
					<if test="item.delFlag==null">
						when id=#{item.id} then scm_stock.del_flag
					</if>
				</foreach>
			</trim>
			<trim prefix="materialId_count=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.materialIdCount!=null">
						when id=#{item.id} then #{item.materialIdCount}
					</if>
					<if test="item.materialIdCount==null">
						when id=#{item.id} then scm_stock.materialId_count
					</if>
				</foreach>
			</trim>
			<trim prefix="qrcode_id=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.qrcodeId!=null">
						when id=#{item.id} then #{item.qrcodeId}
					</if>
					<if test="item.qrcodeId==null">
						when id=#{item.id} then scm_stock.qrcode_id
					</if>
				</foreach>
			</trim>

			<trim prefix="account_source=case" suffix="end,">
				<foreach collection="list" item="item" index="index">
					<if test="item.accountSource!=null">
						when id=#{item.id} then #{item.accountSource}
					</if>
					<if test="item.accountSource==null">
						when id=#{item.id} then scm_stock.account_source
					</if>
				</foreach>
			</trim>

		</trim>
		WHERE id IN
		<foreach collection="list" index="index" item="item" separator="," open="(" close=")">
			#{item.id}
		</foreach>
	</update>




	<!-- 批量保存库存明细 -->
	<insert id="batchSave" parameterType="List" useGeneratedKeys="true" keyProperty="id">
		insert into scm_stock_in_item
		(
		`inhead_id`,
		`materiel_id`,
		`batch`,
		`count`,
		`unit_price`,
		`amount`,
		`warehouse`,
		`wareh_location`,
		`return_reason`,
		`source_type`,
		`source_code`,
		`source_id`,
		`expense`,
		`cost`,
		`create_by`,
		`create_time`,
		`update_by`,
		`update_time`,
		`del_flag`,
		`materialId_count`,
		`qrcode_id`,
		`account_source`
		)
		values
		<foreach collection="list" item="obj" separator=",">
			(
			#{obj.inheadId},
			#{obj.materielId},
			#{obj.batch},
			#{obj.count},
			#{obj.unitPrice},
			#{obj.amount},
			#{obj.warehouse},
			#{obj.warehLocation},
			#{obj.returnReason},
			#{obj.sourceType},
			#{obj.sourceCode},
			#{obj.sourceId},
			#{obj.expense},
			#{obj.cost},
			#{obj.createBy},
			#{obj.createTime},
			#{obj.updateBy},
			#{obj.updateTime},
			#{obj.delFlag},
			#{obj.materialIdCount},
			#{obj.qrcodeId},
			#{obj.accountSource}
			)
		</foreach>
	</insert>


	<select id="getItemDetailById" resultType="com.ev.scm.domain.StockInItemDO">
		SELECT
		DISTINCT
		a.id,
		a.inhead_id,
		a.`count`,
		a.unit_price,
		a.amount,
		a.expense,
		a.cost,
		a.materialId_count,
		a.account_source
		FROM
		scm_stock_in_item a
		LEFT JOIN scm_stock_in b on a.inhead_id=b.id
		WHERE
		b.id in
		<foreach item="id" collection="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>

	<select id="getItemDate" resultType="map">
		SELECT
		DISTINCT
		a.create_time AS createTime
		FROM
		scm_stock_in_item a
		WHERE
		a.id in
		<foreach item="id" collection="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</select>



	<select id="getInCountOfContract" resultType="java.math.BigDecimal">
		SELECT
			  sum(`count`)
		FROM
			scm_stock_in_item a

		WHERE
			a.source_id =#{sourceId}
		and
			a.source_type = #{sourceType}
	</select>

</mapper>